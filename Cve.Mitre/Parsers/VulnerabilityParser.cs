using System.Text.RegularExpressions;
using Cve.Mitre.Models;

namespace Cve.Mitre.Parsers;

public class VulnerabilityParser : IParser<Vulnerability>
{
    private const string TableStart = "<div id=\"GeneratedTable\">";
    private const string TableEnd = "</table>";

    private const string CveStart = "<h2>";
    private const string CveEnd = "</h2>";

    private const string DescriptionStart = "<th colspan=\"2\">Description</th>";
    
    private const string TableDataStart = "<td colspan=\"2\">";
    private const string TableDataEnd = "</td>";
    
    private const string ReferenceStart = "<th colspan=\"2\">References</th>";
    private const string AssigningCnaStart = "<th colspan=\"2\">Assigning CNA</th>";
    private const string DataRecordStart = "<th colspan=\"2\">Date Record Created</th>";

    private const string UnorderedListStart = "<ul>";
    private const string UnorderedListEnd = "</ul>";
    private const string ListStart = "<li>";

    private const string DateRecordRegex = "[0-9]{8}";
    public List<Vulnerability> Parse(string htmlPage)
    {
        if (string.IsNullOrWhiteSpace(htmlPage))
        {
            return new List<Vulnerability>();
        }
        
        var tableHtml = ExtractTable(htmlPage);

        if (string.IsNullOrWhiteSpace(tableHtml))
        {
            return new List<Vulnerability>();
        }

        var vulnerability = new Vulnerability
        {
            CveId = ExtractCve(tableHtml),
            Description = ExtractDescription(tableHtml),
            References = ExtractReferences(tableHtml),
            AssigningCna = ExtractAssigningCna(tableHtml),
            DateRecordCreated = ExtractDateRecord(tableHtml)
        };

        return new List<Vulnerability> {vulnerability};
    }

    private static DateOnly ExtractDateRecord(string tableHtml)
    {
        var data = tableHtml
            .Split(DataRecordStart).Last()
            .Split("</b>").First()
            .Trim();

        var date = Regex.Match(data, DateRecordRegex).Value;

        return DateOnly.ParseExact(date, "yyyyMMdd");
    }

    private static string ExtractAssigningCna(string tableHtml)
    {
        return tableHtml
            .Split(AssigningCnaStart).Last()
            .Split(DataRecordStart).First()
            .Split(TableDataStart).Last()
            .Split(TableDataEnd).First()
            .Trim();
    }

    private static List<Uri> ExtractReferences(string tableHtml)
    {
        var listOfReferences = tableHtml
            .Split(ReferenceStart).Last()
            .Split(AssigningCnaStart).First()
            .Split(UnorderedListStart).Last()
            .Split(UnorderedListEnd).First()
            .Split(ListStart)
            .Where(x => !string.IsNullOrWhiteSpace(x.Trim()))
            .ToList();

        return listOfReferences
            .Select(
                x => 
                    new Uri(x
                    .Split("href=\"").Last()
                    .Split("\">").First())
                )
            .ToList();
    }

    private static string ExtractDescription(string tableHtml)
    {
        return tableHtml
            .Split(DescriptionStart).Last()
            .Split(ReferenceStart).First()
            .Split(TableDataStart).Last()
            .Split(TableDataEnd).First()
            .Trim();
    }

    private static string ExtractCve(string tableHtml)
    {
        return tableHtml
            .Split(CveEnd).First()
            .Split(CveStart).Last()
            .Trim();
    }

    private static string ExtractTable(string htmlPage)
    {
        return htmlPage
            .Split(TableStart).Last()
            .Split(TableEnd).First()
            .Trim();
    }
}